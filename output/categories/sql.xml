<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Py, BI and Stuff (Posts about SQL)</title><link>https://inzaniak.github.io/pybistuffblog/</link><description></description><atom:link href="https://inzaniak.github.io/pybistuffblog/categories/sql.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><copyright>Contents Â© 2017 &lt;a href="mailto:inzaniak@gmail.com"&gt;Umberto Grando&lt;/a&gt; </copyright><lastBuildDate>Tue, 25 Apr 2017 15:40:55 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>SQL: Find running queries with a simple T-SQL Script</title><link>https://inzaniak.github.io/pybistuffblog/posts/2017/04/18/sql-find-running-queries-with-a-simple-t-sql-script.html</link><dc:creator>Umberto Grando</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Today i want to share a simple snippet of code which I find useful from time to time.
With this code you can check if a query is running on your db in a quick and effective way.
&lt;/p&gt;&lt;pre style="background:#272822;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;margin:0;line-height:125%;"&gt;&lt;span style="color:#66d9ef;"&gt;SELECT&lt;/span&gt; 
    &lt;span style="color:#f8f8f2;"&gt;sqltext.TEXT,&lt;/span&gt; 
    &lt;span style="color:#f8f8f2;"&gt;req.session_id,&lt;/span&gt; 
    &lt;span style="color:#f8f8f2;"&gt;req.status,&lt;/span&gt; 
    &lt;span style="color:#f8f8f2;"&gt;req.command,&lt;/span&gt; 
    &lt;span style="color:#f8f8f2;"&gt;req.cpu_time,&lt;/span&gt; 
    &lt;span style="color:#f8f8f2;"&gt;req.total_elapsed_time&lt;/span&gt; 
&lt;span style="color:#66d9ef;"&gt;FROM&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;sys.dm_exec_requests&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;req&lt;/span&gt; 
    &lt;span style="color:#66d9ef;"&gt;CROSS&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;APPLY&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;sys.dm_exec_sql_text(sql_handle)&lt;/span&gt; &lt;span style="color:#66d9ef;"&gt;AS&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;sqltext&lt;/span&gt;
&lt;/pre&gt;
That's it, have a nice day :)&lt;/div&gt;</description><category>Senza categoria</category><category>SQL</category><guid>https://inzaniak.github.io/pybistuffblog/posts/2017/04/18/sql-find-running-queries-with-a-simple-t-sql-script.html</guid><pubDate>Tue, 18 Apr 2017 12:38:25 GMT</pubDate></item><item><title>Python: Clean SQL views for documentation</title><link>https://inzaniak.github.io/pybistuffblog/posts/2017/02/07/python-clean-sql-views-for-documentation.html</link><dc:creator>Umberto Grando</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;One of the most tedious tasks of working with databases is to write and maintain documentation, in particular writing reports from tables and views.&lt;/p&gt;
&lt;p&gt;So why not try to make this task a bit less heavy by using Python?
&lt;/p&gt;&lt;h6&gt;Step0-The input and the output&lt;/h6&gt;
The script requires that the views are created using create view.
Example:
&lt;h6&gt;Right click on view&lt;/h6&gt;
&lt;img class="alignnone  wp-image-107" src="https://inzaniak.github.io/pybistuffblog/2017/02/img1.png" alt="img1" width="477" height="298"&gt;
&lt;h6&gt;Copy view&lt;/h6&gt;
&lt;img class="alignnone size-full wp-image-110" src="https://inzaniak.github.io/pybistuffblog/2017/02/img2.png" alt="img2" width="440" height="237"&gt;
&lt;h6&gt;Output view after python script&lt;/h6&gt;
&lt;img class="alignnone size-full wp-image-121" src="https://inzaniak.github.io/pybistuffblog/2017/02/img3.png" alt="img3" width="424" height="224"&gt;
&lt;hr&gt;

&lt;h6&gt;Step1 - Extract Columns Function&lt;/h6&gt;

&lt;pre style="background:#272822;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;margin:0;line-height:125%;"&gt;&lt;span style="color:#66d9ef;"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e;"&gt;extract_columns&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;(in_txt):&lt;/span&gt;
    &lt;span style="color:#e6db74;"&gt;"""Simple function to extract columns between select and from"""&lt;/span&gt;
    &lt;span style="color:#75715e;"&gt;# Splitting by select i only choose text after select&lt;/span&gt;
    &lt;span style="color:#f8f8f2;"&gt;out_view&lt;/span&gt; &lt;span style="color:#f92672;"&gt;=&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;re&lt;/span&gt;&lt;span style="color:#f92672;"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;split(&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;r'(?i)\bselect\b'&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;,in_txt)[&lt;/span&gt;&lt;span style="color:#ae81ff;"&gt;1&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;]&lt;/span&gt;
    &lt;span style="color:#75715e;"&gt;# Splitting by from i only choose text before from&lt;/span&gt;
    &lt;span style="color:#f8f8f2;"&gt;out_view&lt;/span&gt; &lt;span style="color:#f92672;"&gt;=&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;re&lt;/span&gt;&lt;span style="color:#f92672;"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;split(&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;r'(?i)\bfrom\b'&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;,out_view)[&lt;/span&gt;&lt;span style="color:#ae81ff;"&gt;0&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;]&lt;/span&gt;
    &lt;span style="color:#75715e;"&gt;# Cleaning extra spaces and tabs&lt;/span&gt;
    &lt;span style="color:#f8f8f2;"&gt;out_view&lt;/span&gt;&lt;span style="color:#f92672;"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;strip()&lt;/span&gt;
    &lt;span style="color:#66d9ef;"&gt;return&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;out_view&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Let's start by defining a function with the purpose of extracting only the columns from the script of a view. Thus ignoring everything before the Select statement and everything after the From statement.&lt;/p&gt;
&lt;hr&gt;

&lt;h6&gt;Step2 -Let's start from the variables&lt;/h6&gt;

&lt;pre style="background:#272822;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;margin:0;line-height:125%;"&gt;&lt;span style="color:#f92672;"&gt;import&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;re&lt;/span&gt;

&lt;span style="color:#75715e;"&gt;# We open the file containing the view&lt;/span&gt;
&lt;span style="color:#f8f8f2;"&gt;view&lt;/span&gt; &lt;span style="color:#f92672;"&gt;=&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;extract_columns(open(&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;'input.txt'&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;,&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;'r'&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;,encoding&lt;/span&gt;&lt;span style="color:#f92672;"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;'utf-8'&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;)&lt;/span&gt;&lt;span style="color:#f92672;"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;read())&lt;/span&gt;
&lt;span style="color:#75715e;"&gt;# Now we insert text into the list and we create a new list&lt;/span&gt;
&lt;span style="color:#f8f8f2;"&gt;view_l&lt;/span&gt; &lt;span style="color:#f92672;"&gt;=&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;view&lt;/span&gt;&lt;span style="color:#f92672;"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;split(&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;'&lt;/span&gt;&lt;span style="color:#ae81ff;"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;'&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;)&lt;/span&gt;
&lt;span style="color:#f8f8f2;"&gt;out_l&lt;/span&gt; &lt;span style="color:#f92672;"&gt;=&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;[]&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Now we declare the variables we are going to use.
&lt;/p&gt;&lt;ul&gt;
    &lt;li&gt;view: contains the input text&lt;/li&gt;
    &lt;li&gt;view_l: is a list created by splitting text by line&lt;/li&gt;
    &lt;li&gt;out_l: is the output list&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h6&gt;Step3-Main Code&lt;/h6&gt;

&lt;pre style="background:#272822;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;margin:0;line-height:125%;"&gt;&lt;span style="color:#75715e;"&gt;# Now we loop through all the lines of the view&lt;/span&gt;
&lt;span style="color:#66d9ef;"&gt;for&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;num,line&lt;/span&gt; &lt;span style="color:#f92672;"&gt;in&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;enumerate(view_l):&lt;/span&gt;
    &lt;span style="color:#75715e;"&gt;# Clean extra spaces&lt;/span&gt;
    &lt;span style="color:#f8f8f2;"&gt;line&lt;/span&gt; &lt;span style="color:#f92672;"&gt;=&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;line&lt;/span&gt;&lt;span style="color:#f92672;"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;strip()&lt;/span&gt;
    &lt;span style="color:#75715e;"&gt;# Remove Comments&lt;/span&gt;
    &lt;span style="color:#f8f8f2;"&gt;line&lt;/span&gt; &lt;span style="color:#f92672;"&gt;=&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;line&lt;/span&gt;&lt;span style="color:#f92672;"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;split(&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;'--'&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;)[&lt;/span&gt;&lt;span style="color:#ae81ff;"&gt;0&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;]&lt;/span&gt;
    &lt;span style="color:#75715e;"&gt;# Remove Commas&lt;/span&gt;
    &lt;span style="color:#f8f8f2;"&gt;line&lt;/span&gt; &lt;span style="color:#f92672;"&gt;=&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;line&lt;/span&gt;&lt;span style="color:#f92672;"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;replace(&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;','&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;,&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;''&lt;span style="color:#ffffff;"&gt;,&lt;/span&gt;1&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;)&lt;/span&gt;
    &lt;span style="color:#75715e;"&gt;# Substitute Tabs with Spaces&lt;/span&gt;
    &lt;span style="color:#f8f8f2;"&gt;line&lt;/span&gt; &lt;span style="color:#f92672;"&gt;=&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;line&lt;/span&gt;&lt;span style="color:#f92672;"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;replace(&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;'&lt;/span&gt;&lt;span style="color:#ae81ff;"&gt;\t&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;'&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;,&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;' '&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;)&lt;/span&gt;
    &lt;span style="color:#75715e;"&gt;# While two spaces are in line we substitute the with one space&lt;/span&gt;
    &lt;span style="color:#66d9ef;"&gt;while&lt;/span&gt; &lt;span style="color:#e6db74;"&gt;'  '&lt;/span&gt; &lt;span style="color:#f92672;"&gt;in&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;line:&lt;/span&gt;
        &lt;span style="color:#f8f8f2;"&gt;line&lt;/span&gt; &lt;span style="color:#f92672;"&gt;=&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;line&lt;/span&gt;&lt;span style="color:#f92672;"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;replace(&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;'  '&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;,&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;' '&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;)&lt;/span&gt;
    &lt;span style="color:#75715e;"&gt;# Remove [ and ]&lt;/span&gt;
    &lt;span style="color:#f8f8f2;"&gt;line&lt;/span&gt; &lt;span style="color:#f92672;"&gt;=&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;line&lt;/span&gt;&lt;span style="color:#f92672;"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;replace&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;(&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;'['&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;,&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;''&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;)&lt;/span&gt;&lt;span style="color:#f92672;"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;replace(&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;']'&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;,&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;''&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;)&lt;/span&gt;
    &lt;span style="color:#75715e;"&gt;# If line is not empty&lt;/span&gt;
    &lt;span style="color:#66d9ef;"&gt;if&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;len(line)&lt;/span&gt;&lt;span style="color:#f92672;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#ae81ff;"&gt;0&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;:&lt;/span&gt;
        &lt;span style="color:#75715e;"&gt;# If line is not a comment&lt;/span&gt;
        &lt;span style="color:#66d9ef;"&gt;if&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;line[&lt;/span&gt;&lt;span style="color:#ae81ff;"&gt;0&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;]&lt;/span&gt;&lt;span style="color:#f92672;"&gt;!=&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;'-'&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;:&lt;/span&gt;
            &lt;span style="color:#75715e;"&gt;# We add the new line to out_l&lt;/span&gt;
            &lt;span style="color:#f8f8f2;"&gt;out_l&lt;/span&gt;&lt;span style="color:#f92672;"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;append(re&lt;/span&gt;&lt;span style="color:#f92672;"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;split(&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;r'(?i)\bas\b'&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;,line))&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Finally we come to the main code.
The first part is a For loop, using the list we created in step2.
For each line the script removes useless characters and comments and then adds the line to the new list.&lt;/p&gt;
&lt;hr&gt;

&lt;h6&gt;Step4-Output Text&lt;/h6&gt;

&lt;pre style="background:#272822;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;margin:0;line-height:125%;"&gt;&lt;span style="color:#75715e;"&gt;# Open output file&lt;/span&gt;
&lt;span style="color:#66d9ef;"&gt;with&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;open(&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;'out.txt'&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;,&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;'w'&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;)&lt;/span&gt; &lt;span style="color:#66d9ef;"&gt;as&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;out_txt:&lt;/span&gt;
    &lt;span style="color:#75715e;"&gt;# For line in output list&lt;/span&gt;
    &lt;span style="color:#66d9ef;"&gt;for&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;line&lt;/span&gt; &lt;span style="color:#f92672;"&gt;in&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;out_l:&lt;/span&gt;
        &lt;span style="color:#75715e;"&gt;# Try / Except to output all the values to the file separated by ','&lt;/span&gt;
        &lt;span style="color:#66d9ef;"&gt;print&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;(line)&lt;/span&gt;
        &lt;span style="color:#66d9ef;"&gt;if&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;len(line)&lt;/span&gt;&lt;span style="color:#f92672;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#ae81ff;"&gt;1&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;:&lt;/span&gt;
            &lt;span style="color:#f8f8f2;"&gt;out_txt&lt;/span&gt;&lt;span style="color:#f92672;"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;write(&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;'as'&lt;/span&gt;&lt;span style="color:#f92672;"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;join(line[&lt;/span&gt;&lt;span style="color:#ae81ff;"&gt;0&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;:&lt;/span&gt;&lt;span style="color:#f92672;"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff;"&gt;1&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;])&lt;/span&gt;&lt;span style="color:#f92672;"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;strip()&lt;/span&gt;&lt;span style="color:#f92672;"&gt;+&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;'|'&lt;/span&gt;&lt;span style="color:#f92672;"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;str(line[&lt;/span&gt;&lt;span style="color:#f92672;"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff;"&gt;1&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;])&lt;/span&gt;&lt;span style="color:#f92672;"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;strip()&lt;/span&gt;&lt;span style="color:#f92672;"&gt;+&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;'&lt;/span&gt;&lt;span style="color:#ae81ff;"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;'&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;)&lt;/span&gt;
        &lt;span style="color:#66d9ef;"&gt;else&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;:&lt;/span&gt;
            &lt;span style="color:#f8f8f2;"&gt;out_txt&lt;/span&gt;&lt;span style="color:#f92672;"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;write(str(line[&lt;/span&gt;&lt;span style="color:#ae81ff;"&gt;0&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;])&lt;/span&gt;&lt;span style="color:#f92672;"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;strip()&lt;/span&gt;&lt;span style="color:#f92672;"&gt;+&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;'|'&lt;/span&gt;&lt;span style="color:#f92672;"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;str(line[&lt;/span&gt;&lt;span style="color:#ae81ff;"&gt;0&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;])&lt;/span&gt;&lt;span style="color:#f92672;"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;strip()&lt;/span&gt;&lt;span style="color:#f92672;"&gt;+&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;'&lt;/span&gt;&lt;span style="color:#ae81ff;"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74;"&gt;'&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;)&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;In the last part we write to an external file using a Try/Except to avoid IndexErrors.&lt;/p&gt;
&lt;p&gt;This article is also available on &lt;a href="https://powerbloggerbi.com"&gt;PowerBloggerBI&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><category>Senza categoria</category><category>SQL</category><guid>https://inzaniak.github.io/pybistuffblog/posts/2017/02/07/python-clean-sql-views-for-documentation.html</guid><pubDate>Tue, 07 Feb 2017 17:47:19 GMT</pubDate></item><item><title>MSSQL: Get all Columns from Tables/Views</title><link>https://inzaniak.github.io/pybistuffblog/posts/2017/02/02/mssql-get-all-columns-from-tablesviews.html</link><dc:creator>Umberto Grando</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;When developing a database, it can be useful to be aware of column names on tables, in case one wants to check for aliasing errors or search for a specific column.&lt;/p&gt;
&lt;p&gt;To retrieve them, you just need to read from some system views.
&lt;/p&gt;&lt;ul&gt;
    &lt;li&gt;sys.columns: Contains the list of columns contained within the DB.&lt;/li&gt;
    &lt;li&gt;sys.tables: Contains the list of tables contained within the DB.&lt;/li&gt;
    &lt;li&gt;sys.schemas: Contains a list of the schemas contained within the DB.&lt;/li&gt;
    &lt;li&gt;sys.types: Contains the list of data types contained within the DB.&lt;/li&gt;
    &lt;li&gt;sys.views: Contains the list of views contained within the DB.&lt;/li&gt;
&lt;/ul&gt;
Launching one of these two scripts you will get the list of tables or views with their schemas and their columns with data types
&lt;p&gt;&lt;b&gt;Version with tables:&lt;/b&gt;
&lt;/p&gt;&lt;pre style="background:#272822;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;margin:0;line-height:125%;"&gt;&lt;span style="color:#66d9ef;"&gt;select&lt;/span&gt;   &lt;span style="color:#f8f8f2;"&gt;s.name&lt;/span&gt;   &lt;span style="color:#66d9ef;"&gt;as&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef;"&gt;Schema&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;]&lt;/span&gt;
  &lt;span style="color:#f8f8f2;"&gt;,t.name&lt;/span&gt;   &lt;span style="color:#66d9ef;"&gt;as&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef;"&gt;Table&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;]&lt;/span&gt;
  &lt;span style="color:#f8f8f2;"&gt;,&lt;/span&gt;&lt;span style="color:#66d9ef;"&gt;c&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;.name&lt;/span&gt;   &lt;span style="color:#66d9ef;"&gt;as&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef;"&gt;Column&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;]&lt;/span&gt;
  &lt;span style="color:#f8f8f2;"&gt;,tp.name&lt;/span&gt;  &lt;span style="color:#66d9ef;"&gt;as&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef;"&gt;Type&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;]&lt;/span&gt;
  &lt;span style="color:#f8f8f2;"&gt;,&lt;/span&gt;&lt;span style="color:#66d9ef;"&gt;c&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;.max_length&lt;/span&gt; &lt;span style="color:#66d9ef;"&gt;as&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef;"&gt;Length&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;]&lt;/span&gt;
&lt;span style="color:#66d9ef;"&gt;from&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;sys.columns&lt;/span&gt; &lt;span style="color:#66d9ef;"&gt;c&lt;/span&gt;
&lt;span style="color:#66d9ef;"&gt;join&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;sys.tables&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;t&lt;/span&gt;
&lt;span style="color:#66d9ef;"&gt;on&lt;/span&gt; &lt;span style="color:#66d9ef;"&gt;c&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;.object_id&lt;/span&gt; &lt;span style="color:#f92672;"&gt;=&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;t.object_id&lt;/span&gt;
&lt;span style="color:#66d9ef;"&gt;join&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;sys.schemas&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;s&lt;/span&gt;
&lt;span style="color:#66d9ef;"&gt;on&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;s.schema_id&lt;/span&gt; &lt;span style="color:#f92672;"&gt;=&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;t.schema_id&lt;/span&gt;
&lt;span style="color:#66d9ef;"&gt;join&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;sys.types&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;tp&lt;/span&gt;
&lt;span style="color:#66d9ef;"&gt;on&lt;/span&gt; &lt;span style="color:#66d9ef;"&gt;c&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;.system_type_id&lt;/span&gt; &lt;span style="color:#f92672;"&gt;=&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;tp.system_type_id&lt;/span&gt;
&lt;/pre&gt;
Â 
&lt;p&gt;&lt;b&gt;Version with Views:&lt;/b&gt;
&lt;/p&gt;&lt;pre style="background:#272822;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;margin:0;line-height:125%;"&gt;&lt;span style="color:#66d9ef;"&gt;select&lt;/span&gt;   &lt;span style="color:#f8f8f2;"&gt;s.name&lt;/span&gt;   &lt;span style="color:#66d9ef;"&gt;as&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef;"&gt;Schema&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;]&lt;/span&gt;
  &lt;span style="color:#f8f8f2;"&gt;,v.name&lt;/span&gt;   &lt;span style="color:#66d9ef;"&gt;as&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef;"&gt;View&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;]&lt;/span&gt;
  &lt;span style="color:#f8f8f2;"&gt;,&lt;/span&gt;&lt;span style="color:#66d9ef;"&gt;c&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;.name&lt;/span&gt;   &lt;span style="color:#66d9ef;"&gt;as&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef;"&gt;Column&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;]&lt;/span&gt;
  &lt;span style="color:#f8f8f2;"&gt;,tp.name&lt;/span&gt;  &lt;span style="color:#66d9ef;"&gt;as&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef;"&gt;Type&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;]&lt;/span&gt;
  &lt;span style="color:#f8f8f2;"&gt;,&lt;/span&gt;&lt;span style="color:#66d9ef;"&gt;c&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;.max_length&lt;/span&gt; &lt;span style="color:#66d9ef;"&gt;as&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef;"&gt;Length&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;]&lt;/span&gt;
&lt;span style="color:#66d9ef;"&gt;from&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;sys.columns&lt;/span&gt; &lt;span style="color:#66d9ef;"&gt;c&lt;/span&gt;
&lt;span style="color:#66d9ef;"&gt;join&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;sys.views&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;v&lt;/span&gt;
&lt;span style="color:#66d9ef;"&gt;on&lt;/span&gt; &lt;span style="color:#66d9ef;"&gt;c&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;.object_id&lt;/span&gt; &lt;span style="color:#f92672;"&gt;=&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;v.object_id&lt;/span&gt;
&lt;span style="color:#66d9ef;"&gt;join&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;sys.schemas&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;s&lt;/span&gt;
&lt;span style="color:#66d9ef;"&gt;on&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;s.schema_id&lt;/span&gt; &lt;span style="color:#f92672;"&gt;=&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;v.schema_id&lt;/span&gt;
&lt;span style="color:#66d9ef;"&gt;join&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;sys.types&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;tp&lt;/span&gt;
&lt;span style="color:#66d9ef;"&gt;on&lt;/span&gt; &lt;span style="color:#66d9ef;"&gt;c&lt;/span&gt;&lt;span style="color:#f8f8f2;"&gt;.system_type_id&lt;/span&gt; &lt;span style="color:#f92672;"&gt;=&lt;/span&gt; &lt;span style="color:#f8f8f2;"&gt;tp.system_type_id&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>Senza categoria</category><category>SQL</category><category>TSQL</category><guid>https://inzaniak.github.io/pybistuffblog/posts/2017/02/02/mssql-get-all-columns-from-tablesviews.html</guid><pubDate>Thu, 02 Feb 2017 10:22:15 GMT</pubDate></item></channel></rss>