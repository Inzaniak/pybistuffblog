Title: Power Bi, The Python Way
Subhead: How to and quickstart
Year: 2018
Month: August
Date: 2018-08-09
Author: Umberto
Tags: python, power bi, clustering, kmeans, pandas
---PostStart---
Hello World!
Yesterday the Power Bi team announced that Python is finally available as a preview in Power Bi Desktop.
For those of you who don't know Power Bi, it's a business analytics service by Microsoft that provides interactive visualizations with self-service business intelligence capabilities.
Python in Power Bi can be used in two ways: scripting and visualizations.
çPython as Data Source
The first thing we need to do is to enable Python in Power Bi.
To do this we go to options then preview features and we enable Python Support.
|powerbi_preview01.png
|powerbi_preview02.png
Now that we have enabled the feature we can start working with Python.
To add a new Python Data Source we have to click on Get Data and the select Python Script.
Power Bi uses Pandas dataframe as python sources. In this example i'm going to use a Pokemon dataset found on Github: https://github.com/fanzeyi/Pokemon-DB .
Let's start coding:
§import pandas as pd
§df = pandas.read_json('https://raw.githubusercontent.com/fanzeyi/Pokemon-DB/master/pokedex.json')
With this simple code we can transform a Json file to a Pandas Dataframe and import it into Power Bi.
I'm going to remove some columns to keep only the data i want:
|powerbi_dataset01.png
Now we need to convert the base column to a Json, otherwise Power Bi can't read the column correctly.
To do this we go back to the code and add this 2 lines:
§import pandas as pd
§import json
§
§df = pandas.read_json('https://raw.githubusercontent.com/fanzeyi/Pokemon-DB/master/pokedex.json')
§df['base'] = df['base'].apply(lambda x: json.dumps(x))
We can now right click on the base column and choose transform->JSON and then expand the selection:
|powerbi_dataset02.png
Now we need to apply the same thing to type and duplicate the query:
§import pandas as pd
§import json
§
§df = pandas.read_json('https://raw.githubusercontent.com/fanzeyi/Pokemon-DB/master/pokedex.json')
§df['base'] = df['base'].apply(lambda x: json.dumps(x))
§df['type'] = df['type'].apply(lambda x: json.dumps(x))
Now we duplicate the query, remove all the columns we don't need and finally we expand the column type to new lines:
|powerbi_dataset03.png
Next step we need to import the translation of pokemon types, so we create a new query with this code:
§import pandas as pd
§import json
§
§df = pandas.read_json('https://raw.githubusercontent.com/fanzeyi/Pokemon-DB/master/types.json')
We can now join the tables to add the english column to the dataset:
|powerbi_dataset04.png

If we want to add more complex logics to our starting dataset we can apply KMeans clustering on the first query:
§import pandas as pd
§import json
§from sklearn.cluster import KMeans
§
§df = pd.read_json('https://raw.githubusercontent.com/fanzeyi/Pokemon-DB/master/pokedex.json')
§df['HP'] = df['base'].apply(lambda x: json.loads(json.dumps(x))['HP'])
§df['Attack'] = df['base'].apply(lambda x: json.loads(json.dumps(x))['Attack'])
§df['Defense'] = df['base'].apply(lambda x: json.loads(json.dumps(x))['Defense'])
§df['Sp.Atk'] = df['base'].apply(lambda x: json.loads(json.dumps(x))['Sp.Atk'])
§df['Sp.Def'] = df['base'].apply(lambda x: json.loads(json.dumps(x))['Sp.Def'])
§df['Speed'] = df['base'].apply(lambda x: json.loads(json.dumps(x))['Speed'])
§train = df[['HP','Attack','Defense','Sp.Atk','Sp.Def','Speed']]
§kmeans = KMeans(n_clusters=8, random_state=0).fit(train)
§kmeans.labels_
§df['Cluster'] = kmeans.labels_.tolist()
§del train,df['HP'],df['Attack'] ,df['Defense'] ,df['Sp.Atk'] ,df['Sp.Def'] ,df['Speed'] 
§
§df['base'] = df['base'].apply(lambda x: json.dumps(x))
§df['type'] = df['type'].apply(lambda x: json.dumps(x))

Now we can build the report with our Python Dataset:
|powerbi_report01.png

That's all for today.
Next time we are going to take a look at Power Bi Python Visualizations.
